import google_auth_oauthlib
import google.auth
import google.oauth2.credentials
import sqlite3
import json
import os
import shutil
from cardinal_glue.auth.core import Auth

if os.getenv("COLAB_RELEASE_TAG"):
    import google.colab.auth


def _convert_db_to_json(db_path, db_name, json_path, json_name):
    """
    Convert a Google gcloud auth login DB file to a JSON credentials file.

    Parameters
    __________
    db_path: string
        The path to the input DB file.
    db_name: string
        The name of the input DB file.
    json_path: string
        The path to the output JSON file.
    json_name: string
        The name of the output JSON file.

    Returns
    _______
    bool
        Indication of whether a JSON credentials file was successfully created.
    """
    try:
        db = sqlite3.connect(os.path.join(db_path, db_name))
        c = db.cursor()
        cred_list = list(c.execute('SELECT * FROM credentials;'))
        with open(os.path.join(json_path,json_name), 'w') as f:
            f.write(cred_list[0][1])
        print(f'DB file successfully converted to credentials and saved at {json_path}.')
        return True
    except:
        print('Unable to convert DB file.')
        return False


class GoogleAuth(Auth):    
    """
    A class representing authentication with Google.
    Extends the Auth class.

    Attributes
    __________
    __DEFAULT_CREDENTIALS_DEFAULT_CLIENT_ID : string
        The client ID for Google's default auth credentials.
    __DEFAULT_CREDENTIALS_DEFAULT_CLIENT_SECRET : string
        The client secret for Google's default auth credentials.
    __DEFAULT_SCOPES: dict
        The set of authorization scopes needed for cardinal-glue.
    __GOOGLE_AUTH_JSON_NAME: string
        The name of the JSON file containing 
    __GCLOUD_AUTH_DEFAULT_PATH: string
        The operating system-specific location in which 'gcloud auth login' stores the Google credentials DB file.
    __GCLOUD_DB_DEFAULT_NAME: string
        The name of the DB file generated by 'gcloud auth login'.
    __GCLOUD_AUTH_DB_PATH: string
        The path to the DB file generated by 'gcloud auth login'.
    """
    __DEFAULT_CREDENTIALS_DEFAULT_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com'
    __DEFAULT_CREDENTIALS_DEFAULT_CLIENT_SECRET = 'd-FL95Q19q7MQmFpd7hHD0Ty'
    __DEFAULT_SCOPES = [
        "openid",
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/appengine.admin",
        "https://www.googleapis.com/auth/sqlservice.login",
        "https://www.googleapis.com/auth/compute",
        "https://www.googleapis.com/auth/accounts.reauth",
        "https://www.googleapis.com/auth/drive"
      ]
    __GOOGLE_AUTH_JSON_NAME = 'google_application_credentials.json'
    __GCLOUD_AUTH_DEFAULT_PATH = None
    __GCLOUD_DB_DEFAULT_NAME = 'credentials.db'
    __GCLOUD_AUTH_DB_PATH = None

    def __init__(self, auth_path=None, auto_auth=True):
        """
        The constructor for the GoogleAuth class.

        Parameters
        __________
        auth_path : string
            A custom path to search for Google authenticatio files.
        auto_auth : bool
            User choice as whether to automatically attempt authentication with Google while instantiating the object.
        """
        super().__init__()
        if auth_path:
            self.set_auth_directory(auth_path)        
        os.environ['CLOUDSDK_CONFIG'] = self._AUTH_PATH
        os.environ['USE_AUTH_EPHEM'] = '0'
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(self._AUTH_PATH, self.__GOOGLE_AUTH_JSON_NAME)
        if os.getenv("COLAB_RELEASE_TAG"):
            self.__GCLOUD_AUTH_DEFAULT_PATH = '/content/.config/'
        if not self.__GCLOUD_AUTH_DEFAULT_PATH:
            self.__GCLOUD_AUTH_DEFAULT_PATH = os.path.join(self._CONFIG_PATH,'gcloud')      
        self.__GCLOUD_AUTH_DB_PATH = os.path.join(self.__GCLOUD_AUTH_DEFAULT_PATH, self.__GCLOUD_DB_DEFAULT_NAME)
        if auto_auth:
            self.authenticate()
            self.prepare_gdrivefs_auth()

    def authenticate(self, credential_method='file', auto_fetch=True):
        """
        Attempt to authenticate with Google.
        
        Parameters
        __________
        credential_method : string
            The method to obtain credentials with.
        auth_fetch : bool
            Whether to automatically attempt OAuth2 authentication if no local credentials  are available.
        """
        credentials = None
        valid_method = {'file','oauth2'}
        if credential_method not in valid_method:
            raise ValueError("The value for 'credential_method' must be either \"file\" or \"oauth2\".")
        if credential_method == 'file':
            if self.__google_credentials_from_file():
                credentials,_ = google.auth.default()
            else:
                print('Failed to generate credentials from an existing file.\n')
                if auto_fetch:
                    credential_method = 'oauth2'
                    print('We will now try to obtain credentials through the OAuth2 authentication flow.\n')
        if credential_method == 'oauth2':
            credentials = self.__google_credentials_from_auth()
        if credentials is None:
            print('Auth object instantiated without valid Google credentails.\n')
        else:
            print('Successfully authenticated with Google.\n')
        self.credentials = credentials

    def __google_credentials_from_file(self):
        """
        Find existing files from a previous call to 'gcloud auth login'.

        Returns
        _______
        bool
            Indicates whether a Google credentials JSON file exists.
        """
        if 'GOOGLE_APPLICATION_CREDENTIALS' in os.environ:
            print("\nExisting credentials have been found from a previous 'gcloud auth login' call.\n")
            return True
        if os.path.exists(self.__GCLOUD_AUTH_DB_PATH):
            shutil.move(self.__GCLOUD_AUTH_DB_PATH, os.path.join(self._AUTH_PATH, self.__GCLOUD_DB_DEFAULT_NAME))
            print("\nAn existing Google DB file has been found from a previous 'gcloud auth login' call.\n")
            print(f"This DB file has been moved to {self._AUTH_PATH}.\n")
        return _convert_db_to_json(self._AUTH_PATH, self.__GCLOUD_DB_DEFAULT_NAME, self._AUTH_PATH, self.__GOOGLE_AUTH_JSON_NAME)

    def __google_credentials_from_auth(self):
        """
        Attempt to generate valid Google credentials through an OAuth2 flow. 

        Returns
        _______
        credentials : google.auth.credentials.Credentials
            Google credentials file.
        """
        if os.getenv("COLAB_RELEASE_TAG"):
            google.colab.auth._gcloud_login()
            if _convert_db_to_json(self._AUTH_PATH, self.__GCLOUD_DB_DEFAULT_NAME, self._AUTH_PATH, self.__GOOGLE_AUTH_JSON_NAME):
                credentials,_ = google.auth.default()
            else:
                print('Failed to obtain credentials through user authentication.')
                return None
        else:
            auth_args = {
                'scopes' : self.__DEFAULT_SCOPES,
                'client_id' : self.__DEFAULT_CREDENTIALS_DEFAULT_CLIENT_ID,
                'client_secret' : self.__DEFAULT_CREDENTIALS_DEFAULT_CLIENT_SECRET
            }
            credentials = google_auth_oauthlib.get_user_credentials(**auth_args)
            if not os.path.exists(os.environ['GOOGLE_APPLICATION_CREDENTIALS']):
                cred_dict = json.loads(credentials.to_json())
                cred_dict['type'] = 'authorized_user'
                with open(os.environ['GOOGLE_APPLICATION_CREDENTIALS'], 'w') as f:
                    json.dump(cred_dict, f)
                print(f"Default Google credentials JSON file saved to {os.environ['GOOGLE_APPLICATION_CREDENTIALS']}.\n")
                print("Warning: these credentials are limited in scope.\n")
                print("Warning: using these credentials may throw errors.\n")
        return credentials

    def specify_google_credentials_file(self, file_path):
        """
        Allow the user to point to an existing DB or JSON credentials file at a path of their choosing.

        Paramters
        _________
        file_path : string
            The path to the credentials file.
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError('Please specify a valid path.')
        valid_type = {'.json','.db'}
        split_tup = os.path.splitext(file_path)
        file_type = split_tup[1]
        if file_type not in valid_type:
            raise ValueError('Please ensure that the credentials files is either a JSON or DB file.')
        if file_type == '.json':
            json_exists = True
            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = file_path
            print(f'The path to the Google credentials file has been set to {file_path}.')
        elif file_type == '.db':
            if _convert_db_to_json(self._AUTH_PATH, self.__GCLOUD_DB_DEFAULT_NAME, self._AUTH_PATH, self.__GOOGLE_AUTH_JSON_NAME):
                print(f'A Google credentials file has been saved to {os.path.join(self._AUTH_PATH, self.__GOOGLE_AUTH_JSON_NAME)}.')
                        
    def prepare_gdrivefs_auth(self):
        """
        Prepare Google auth files for use with the pydata_google_auth package (used for authentication in the gdrivefs package)
        """
        pydata_path = os.path.join(self._CONFIG_PATH, 'pydata')
        os.makedirs(pydata_path, exist_ok=True)
        pydata_auth_path = os.path.join(pydata_path,'pydata_google_credentials.json')
        shutil.copy(os.environ['GOOGLE_APPLICATION_CREDENTIALS'], pydata_auth_path)